buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
    maven {
    	name 'amadornes Maven, for MCMultipart'
    	url "http://maven.amadornes.com/"
    }
	maven { 
		url "http://dvs1.progwml6.com/files/maven" 
	} 
}

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group = config.mod_group
archivesBaseName = "${config.mod_name}-${config.mc_version}"


if(System.env.BUILD_NUMBER)
	version = "${config.mod_version}.b${System.env.BUILD_NUMBER}"

minecraft {
    version = "${config.mc_version}-${config.forge_version}-${config.mc_version}"
    runDir = "run"
    replace "@VERSION@", project.version
    mappings = "${config.forge_mappings}"
}

sourceSets {
    main {
        java {
            srcDir 'common'
        }
        resources {
            srcDir 'resources'
        }
    }
    test {
        java {
           srcDir 'test'
        }
    }
}

dependencies {
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    deobfProvided "MCMultiPart:MCMultiPart:${config.mcmultipart_version}:universal"
    compile "mezz.jei:jei_${config.jei_mc_version}:${config.jei_version}"
}

jar {
	// Exclude Gimp files
	exclude '**/*.xcf'

	// Exclude Audacity Files
	exclude '**/*_data/*'
	exclude '**/*.aup'

	// Exclude Blender Files
	exclude '**/*.blend'
	exclude '**/*.blend?'

	// Exclude .svg files
	exclude '**/*.svg'
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "config.mc_version", project.minecraft.version

    // Replace properties in info files
    from(sourceSets.main.resources.srcDirs) {
        include '*.info'
        expand 'version':config.version,'mcversion':project.minecraft.version
    }
    // Filter out unsupported keys from the material files to keep console output clean
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.mtl'
        filter {String line ->
        	isValidMtlLine(line) ? line : null
        }
    }
}

// Cleans up all material files in-place.
// Manually run to have a clean repository.
task cleanupMtl <<
{
	FileTree tree = fileTree('resources/assets/taam/models') {
	    include '**/*.mtl'
	}
	tree.each {File file ->
		println "Attempting to fix $file.name"
		List<String> content = new ArrayList<String>(20)
		BufferedReader reader = new BufferedReader(new FileReader(file))
		String currentLine
		while((currentLine = reader.readLine()) != null) {
			if(isValidMtlLine(currentLine)) {
				content.add(currentLine);
			}
		}
		reader.close()
		BufferedWriter writer = new BufferedWriter(new FileWriter(file))
		content.each {String line ->
			writer.write(line)
			writer.write('\n')
		}
		writer.close()
	}
}

boolean isValidMtlLine(String line) {
	if(
	line.startsWith('illum') ||
	line.startsWith('Ns') ||
	line.startsWith('Ni') ||
	line.startsWith('Ks')
	) {
		return false;
	}
	return true;
}
