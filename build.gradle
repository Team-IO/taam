buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		// Used for com.github.breadmoirai.github-release:
		classpath 'com.squareup.okhttp3:okhttp:3.12.1'
		classpath 'com.j256.simplemagic:simplemagic:1.16'
	}
}
plugins {
	id "com.github.breadmoirai.github-release" version "2.2.1"
	id 'com.matthewprenger.cursegradle' version "1.1.2"
	id "jacoco"
}
apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
	maven {
		name 'amadornes Maven, for MCMultipart'
		url "http://maven.amadornes.com/"
	}
	maven {
		name 'for JEI'
		url "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		name "bbm, for MinecraftJUnit"
		url "http://api.dmodoomsirius.me/"
	}
	maven {
		name "bintray, for codacy upload"
		url "http://dl.bintray.com/typesafe/maven-releases"
	}
}

ext.configFile = file "build.properties"

configFile.withReader {
	def prop = new Properties()
	prop.load(it)
	project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group = config.mod_group
archivesBaseName = "${config.mod_name}-${config.mc_version}"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
}

if (System.env.BUILD_NUMBER)
	version = "${config.mod_version}.b${System.env.BUILD_NUMBER}"

minecraft {
	version = "${config.mc_version}-${config.forge_version}"
	runDir = "run"
	replace "@VERSION@", project.version
	mappings = "${config.forge_mappings}"
}

sourceSets {
	main {
		java {
			srcDir 'common'
		}
		resources {
			srcDir 'resources'
		}
	}
	test {
		java {
			srcDir 'test'
		}
	}
}

configurations {
	codacy
}

dependencies {
	//compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	deobfCompile "MCMultiPart2:MCMultiPart:${config.mcmultipart_version}"
	compile "mezz.jei:jei_${config.jei_mc_version}:${config.jei_version}"

	testCompileOnly(
			'junit:junit:4.12'
	)
	testImplementation(
			'org.junit.jupiter:junit-jupiter-api:5.4.0',
			'com.builtbroken.codinglib:CodingLib:0.+',
			'com.builtbroken.minecraftjunit:MinecraftJUnit:1.12.2-0.+:deobf'
	)
	testRuntimeOnly(
			'org.junit.jupiter:junit-jupiter-engine:5.4.0',
			'org.junit.vintage:junit-vintage-engine:5.4.0'
	)

	codacy group: 'com.codacy', name: 'codacy-coverage-reporter', version: '5.0.310'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}
check.dependsOn jacocoTestReport

task uploadCoverageToCodacy(type: JavaExec, group: "publishing", dependsOn: jacocoTestReport) {
	main = "com.codacy.CodacyCoverageReporter"
	classpath = configurations.codacy
	args = [
			"report",
			"-l",
			"Java",
			"-r",
			"${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	]
}

jar {
	// Exclude Gimp files
	exclude '**/*.xcf'

	// Exclude Audacity Files
	exclude '**/*_data/*'
	exclude '**/*.aup'

	// Exclude Blender Files
	exclude '**/*.blend'
	exclude '**/*.blend?'

	// Exclude .svg files
	exclude '**/*.svg'
}

processResources
		{
			// this will ensure that this task is redone when the versions change.
			inputs.property "version", project.version
			inputs.property "config.mc_version", project.minecraft.version

			// Replace properties in info files
			from(sourceSets.main.resources.srcDirs) {
				include '*.info'
				expand 'version': config.version, 'mcversion': project.minecraft.version
			}
			// Filter out unsupported keys from the material files to keep console output clean
			from(sourceSets.main.resources.srcDirs) {
				include '**/*.mtl'
				filter { String line ->
					isValidMtlLine(line) ? line : null
				}
			}
		}

// Cleans up all material files in-place.
// Manually run to have a clean repository.
task cleanupMtl <<
		{
			FileTree tree = fileTree('resources/assets/taam/models') {
				include '**/*.mtl'
			}
			tree.each { File file ->
				println "Attempting to fix $file.name"
				List<String> content = new ArrayList<String>(20)
				BufferedReader reader = new BufferedReader(new FileReader(file))
				String currentLine
				while ((currentLine = reader.readLine()) != null) {
					if (isValidMtlLine(currentLine)) {
						content.add(currentLine)
					}
				}
				reader.close()
				BufferedWriter writer = new BufferedWriter(new FileWriter(file))
				content.each { String line ->
					writer.write(line)
					writer.write('\n')
				}
				writer.close()
			}
		}

static boolean isValidMtlLine(String line) {
	if (
	line.startsWith('illum') ||
			line.startsWith('Ns') ||
			line.startsWith('Ni') ||
			line.startsWith('Ks') ||
			line.startsWith('Ke')
	) {
		return false
	}
	return true
}

curseforge {
	// Store this in $GRADLE_USER_HOME/gradle.properties
	apiKey = findProperty('curseforge.apikey') ?: "unset"
	project {
		id = '238424'
		changelog = {
			File f = file('build/changelog.md')
			if (f.exists()) {
				return "https://github.com/Team-IO/taam/releases/tag/${config.mc_version}-${config.mod_version}\n\n" + f.readLines().join("\n")
			}
			return "https://github.com/Team-IO/taam/releases/tag/${config.mc_version}-${config.mod_version}"
		}
		changelogType = 'markdown'
		releaseType = "${config.release_type}"
		addGameVersion "${config.mc_version}"
		FilenameFilter filter = { dir, filename -> filename.contains("${config.mc_version}-${config.mod_version}.jar") }
		mainArtifact({
			jar.destinationDir.listFiles(filter).first()
		}) {
			displayName = "${config.mod_version} for MC ${config.mc_version}"
		}

		relations {
			optionalDependency 'jei'
			optionalDependency 'mcmultipart'
		}
	}
	options {
		// debug = false - set this to true for testing

		// Don't recompile, we only want to publish!
		forgeGradleIntegration = false
	}
}

githubRelease {
	// Store this in $GRADLE_USER_HOME/gradle.properties
	def tk = findProperty('github.token') ?: "unset"
	token tk.toString()
	owner "Team-IO"
	repo "taam"
	tagName "${config.mc_version}-${config.mod_version}" // by default this is set to "v${project.version}"
	targetCommitish "${config.release_branch}"
	releaseName "${config.mod_version} for MC ${config.mc_version}"
	body {
		File f = file('build/changelog.md')
		if (f.exists()) {
			return f.readLines().join("\n")
		}
		return ""
	}
	draft false // set this to true for testing
	prerelease "${config.release_type}" == "alpha" || "${config.release_type}" == "beta"
	FilenameFilter filter = { dir, filename -> filename.contains("${config.mc_version}-${config.mod_version}.jar") }
	releaseAssets = {
		jar.destinationDir.listFiles(filter).first()
	}
}
